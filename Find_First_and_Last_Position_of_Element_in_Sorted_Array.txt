class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        if(nums.size() == 0)    return {-1, -1};
        vector<int> sol;
        sol.push_back(lower_binarySearch(nums, target));
        sol.push_back(upper_binarySearch(nums, target));
        if(nums.at(sol.at(0)) == target)    return sol;
        else    return {-1, -1};
    }
    
    int lower_binarySearch(vector<int>& nums, int target)
    {
        int floor = 0;
        int cell = nums.size() - 1;
        while(floor != cell)
        {
            int mid = (floor + cell)/2;
            if(target <= nums.at(mid))
                cell = mid;
            else
                floor = mid+1;
        }
        return floor;
    }
    
    int upper_binarySearch(vector<int>& nums, int target)
    {
        int floor = 0;
        int cell = nums.size() - 1;
        while(floor != cell)
        {
            int mid = (floor + cell)/2;
            if(target >= nums.at(mid+1))
                floor = mid+1;
            else
                cell = mid;
        }
        return cell;
    }
};